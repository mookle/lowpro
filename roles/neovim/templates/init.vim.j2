" Plugin manager
call plug#begin()

{% for item in neovim_plugins %}
{% if item is mapping %}
Plug '{{ item.src }}', {{ item.opt }}
{% else %}
Plug '{{ item }}'
{% endif %}
{% endfor %}

call plug#end()

" General settings
set nocompatible      " no old school vi support
set nobackup  	      " don't backup edited buffers
set noswapfile	      " don't create a swap file
set autoread          " reload externally edited files
set visualbell 	      " silence beeps
set noerrorbells      " silence beeps
set noshowmode        " hide mode display
set updatetime=100    " reduce default of 4000
set foldmethod=syntax " use syntax to pre-define folds
set foldlevel=3       " better values set per filetype

" Windows / buffers
set hidden     " hide buffers rather than require they are saved or discarded
set splitbelow " open horizontal splits below the current file
set splitright " open vertical splits to the right of the current file

" Searching
set incsearch  " show search matches as they are typed
set ignorecase " ignore case when searching
set smartcase  " make searches case-sensitive when uppercase is used
set nohlsearch " disable search highlighting

" Editing
set number        " enable line numbers
set numberwidth=2 " minimum column width for line number gutter
set cursorline    " highlight the current line
set ruler         " display the cursor position in STATUS bar
set showcmd       " show partial commands in the STATUS bar
set textwidth=0   " don't wrap
set wrapmargin=0  " don't wrap
set scrolloff=12  " number of lines to display either side of the current
set backspace=indent,eol,start " fix backspace

" Indentation
filetype plugin indent on
set shiftwidth=4  " number of spaces to use when indenting in CMD mode
set shiftround    " round to the closest mulitple of shiftwidth in CMD mode
set expandtab     " convert tabs to spaces in INSERT mode
set softtabstop=4 " number of columns a tab uses

" Visual settings
let $NVIM_TUI_ENABLE_TRUE_COLOR = 1
if (has("termguicolors"))
    set termguicolors
endif
syntax enable

" Colourschemes
let s:theme = 'tender'
let g:ayucolor = 'light'
let g:gruvbox_contrast_dark = 'medium'
let g:gruvbox_contrast_light = 'medium'
let g:lightline = { 'colorscheme': s:theme }
exe 'colorscheme ' . s:theme

" Git gutter
let g:gitgutter_sign_added = '▎'
let g:gitgutter_sign_modified = '▎'
let g:gitgutter_sign_removed = '▎'
let g:gitgutter_sign_removed_first_line = '▎'
let g:gitgutter_sign_modified_removed = '▎'
highlight clear SignColumn
highlight GitGutterAdd ctermfg=148 guifg=#afd700
highlight GitGutterChange ctermfg=74 guifg=#5fafd7
highlight GitGutterDelete ctermfg=167 guifg=#fb4934
highlight link GitGutterChangeDelete GitGutterChange

" FZF
noremap <silent> <C-o> :GFiles<CR>
noremap <silent> <C-p> :Buffer<CR>
noremap <silent> <C-i> :Rg<CR>

" INSERT mode timestamp
inoremap <silent> <C-t> <C-r>=strftime('%F %R')<CR>

" Fern
nnoremap <silent> - :Fern . -reveal=%<CR>

" Autocompletion
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <CR> pumvisible() ? coc#_select_confirm() : "\<CR>"
